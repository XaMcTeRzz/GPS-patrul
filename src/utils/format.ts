import { type PatrolPoint } from '@/types/patrol-types';

export const formatCoordinate = (value: number): string => {
  return value.toString().replace(/^0+/, '');
};

export const formatTime = (minutes: number): string => {
  return minutes.toString().replace(/^0+/, '');
};

export const formatReport = (patrolPoints: PatrolPoint[], startTime: string) => {
  const completedPoints = patrolPoints.filter(point => point.isCompleted);
  const missedPoints = patrolPoints.filter(point => !point.isCompleted);
  
  const startDate = new Date(startTime);
  const endDate = new Date();
  const duration = Math.floor((endDate.getTime() - startDate.getTime()) / 60000); // –≤ –º–∏–Ω—É—Ç–∞—Ö
  
  let report = 'üìä –ó–≤—ñ—Ç –ø—Ä–æ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è:\n\n';
  report += `üïí –ü–æ—á–∞—Ç–æ–∫: ${startDate.toLocaleTimeString()}\n`;
  report += `üèÅ –ö—ñ–Ω–µ—Ü—å: ${endDate.toLocaleTimeString()}\n`;
  report += `‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${duration} —Ö–≤\n\n`;
  
  if (completedPoints.length > 0) {
    report += '‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —Ç–æ—á–∫–∏:\n';
    completedPoints.forEach(point => {
      report += `‚Ä¢ ${point.name}\n`;
      report += `  üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${formatCoordinate(point.latitude)}, ${formatCoordinate(point.longitude)}\n`;
      report += `  ‚≠ïÔ∏è –†–∞–¥—ñ—É—Å: ${formatTime(point.radiusMeters)}–º\n`;
      report += `  ‚è± –ß–∞—Å: ${formatTime(point.timeMinutes)} —Ö–≤\n\n`;
    });
  }
  
  if (missedPoints.length > 0) {
    report += '‚ùå –ù–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ —Ç–æ—á–∫–∏:\n';
    missedPoints.forEach(point => {
      report += `‚Ä¢ ${point.name}\n`;
      report += `  üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${formatCoordinate(point.latitude)}, ${formatCoordinate(point.longitude)}\n`;
      report += `  ‚≠ïÔ∏è –†–∞–¥—ñ—É—Å: ${formatTime(point.radiusMeters)}–º\n`;
      report += `  ‚è± –ß–∞—Å: ${formatTime(point.timeMinutes)} —Ö–≤\n\n`;
    });
  }
  
  report += `üìà –ü—ñ–¥—Å—É–º–æ–∫:\n`;
  report += `‚Ä¢ –í—Å—å–æ–≥–æ —Ç–æ—á–æ–∫: ${patrolPoints.length}\n`;
  report += `‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: ${completedPoints.length}\n`;
  report += `‚Ä¢ –ù–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: ${missedPoints.length}\n`;
  report += `‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: ${Math.round((completedPoints.length / patrolPoints.length) * 100)}%\n`;
  
  return report;
}; 