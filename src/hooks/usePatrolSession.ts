import { useState, useEffect, useRef, useCallback } from 'react';
import { toast } from 'sonner';
import { PatrolSession, PatrolPoint, LogEntry, Settings } from '@/types/patrol-types';
import { sendMissedPointNotification } from '@/utils/notificationService';
import { v4 as uuidv4 } from 'uuid';
import { formatReport } from '@/utils/format';

type UsePatrolSessionProps = {
  patrolPoints: PatrolPoint[];
  addLogEntry: (entry: Omit<LogEntry, 'id'>) => void;
  settings: Settings;
  sendNotification: (notification: any) => Promise<void>;
};

// –¢–∏–ø –¥–ª—è –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—á–∫–∏
type PointMonitorTask = {
  pointId: string;
  pointName: string;
  expiryTime: number; // –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  timeoutMinutes: number;
};

export const usePatrolSession = ({ patrolPoints, addLogEntry, settings, sendNotification }: UsePatrolSessionProps) => {
  const [activePatrol, setActivePatrol] = useState<PatrolSession | null>(() => {
    const saved = localStorage.getItem('activePatrol');
    return saved ? JSON.parse(saved) : null;
  });
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useRef –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  const monitorTasksRef = useRef<PointMonitorTask[]>([]);
  const monitorIntervalRef = useRef<number | null>(null);
  
  // –§–ª–∞–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
  const [testMode, setTestMode] = useState(false);
  const timeMultiplier = testMode ? 0.1 : 1; // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤—Ä–µ–º—è —É—Å–∫–æ—Ä—è–µ—Ç—Å—è –≤ 10 —Ä–∞–∑

  // Load active patrol from localStorage on mount
  useEffect(() => {
    const savedPatrol = localStorage.getItem('activePatrol');
    if (savedPatrol) {
      setActivePatrol(JSON.parse(savedPatrol));
    }
  }, []);

  // Start a new patrol session
  const startPatrol = () => {
    if (patrolPoints.length === 0) {
      toast.error('–î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ç–æ—á–∫—É –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –æ–±—Ö–æ–¥—É');
      return;
    }

    const startTime = new Date().toISOString();
    const newPatrol: PatrolSession = {
      id: uuidv4(),
      startTime,
      status: 'active',
      patrolPoints: patrolPoints.map((point, index) => ({
        ...point,
        isCompleted: false,
        startTime: new Date(Date.parse(startTime) + index * 1000).toISOString() // –î–æ–¥–∞—î–º–æ 1 —Å–µ–∫—É–Ω–¥—É –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏
      })),
      completedPoints: []
    };

    setActivePatrol(newPatrol);
    toast.success('–û–±—Ö—ñ–¥ —Ä–æ–∑–ø–æ—á–∞—Ç–æ');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ç—Ä—É–ª—è
    sendNotification({
      type: 'patrol_started',
      message: 'üöÄ –ü–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ'
    });
  };

  // Mark a patrol point as completed
  const completePatrolPoint = (pointId: string) => {
    if (!activePatrol) return;

    const point = patrolPoints.find(p => p.id === pointId);
    if (!point) return;

    // Add to completed points
    setActivePatrol((prev) => {
      if (!prev) return null;
      
      const updated = {
        ...prev,
        patrolPoints: prev.patrolPoints.map(p =>
          p.id === pointId ? { ...p, isCompleted: true } : p
        ),
        completedPoints: [...prev.completedPoints, pointId],
      };
      
      // Update in localStorage
      localStorage.setItem('activePatrol', JSON.stringify(updated));
      
      return updated;
    });

    // Create a log entry
    addLogEntry({
      patrolId: activePatrol.id,
      pointId,
      pointName: point.name,
      timestamp: new Date().toISOString(),
      status: 'completed',
    });
    
    toast.success(`–¢–æ—á–∫—É "${point.name}" –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ`);
  };

  // End the current patrol
  const endPatrol = async () => {
    if (!activePatrol) return;

    const updatedPatrol = {
      ...activePatrol,
      status: 'completed' as const,
      endTime: new Date().toISOString(),
    };

    // Create log entries for missed points
    const missedPoints = updatedPatrol.patrolPoints
      .filter((point) => !updatedPatrol.completedPoints.includes(point.id));
    
    if (missedPoints.length > 0) {
      missedPoints.forEach(point => {
        addLogEntry({
          patrolId: updatedPatrol.id,
          pointId: point.id,
          pointName: point.name,
          timestamp: new Date().toISOString(),
          status: 'missed',
        });
      });
    }

    // Update in localStorage
    localStorage.setItem('activePatrol', JSON.stringify(updatedPatrol));
    setActivePatrol(updatedPatrol);

    try {
      // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
      const report = formatReport(updatedPatrol.patrolPoints, updatedPatrol.startTime);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
      await sendNotification({
        type: 'patrol_completed',
        message: report
      });

      // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ä—É–ª—å
      setActivePatrol(null);
      localStorage.removeItem('activePatrol');
      toast.success('–û–±—Ö—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('Error ending patrol:', error);
      toast.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –æ–±—Ö–æ–¥—É');
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
  const checkExpiredPoints = useCallback(async () => {
    if (!activePatrol || activePatrol.status !== 'active') return;
    
    const now = Date.now();
    let hasExpiredPoints = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É –ø–∞—Ç—Ä—É–ª—è
    for (const point of activePatrol.patrolPoints) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
      if (activePatrol.completedPoints.includes(point.id)) {
        continue;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–∫–∏
      const startTime = new Date(point.startTime!).getTime();
      const timeoutMs = (point.timeMinutes || settings.patrolTimeMinutes) * 60 * 1000 * (testMode ? 0.1 : 1);
      const isExpired = now >= startTime + timeoutMs;

      if (isExpired) {
        hasExpiredPoints = true;
        console.log(`–¢–æ—á–∫–∞ "${point.name}" –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ –≤—á–∞—Å–Ω–æ! –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è...`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (settings.notificationsEnabled) {
          await sendMissedPointNotification(point, {
            telegramBotToken: settings.telegramBotToken,
            telegramChatId: settings.telegramChatId,
            ...settings.smtpSettings
          });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
        addLogEntry({
          patrolId: activePatrol.id,
          pointId: point.id,
          pointName: point.name,
          timestamp: new Date().toISOString(),
          status: 'delayed',
          notes: `–ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞ —Ç–æ—á–∫–∞ –ø—Ä–æ—Ç—è–≥–æ–º ${point.timeMinutes || settings.patrolTimeMinutes} —Ö–≤–∏–ª–∏–Ω`
        });

        toast.error(`–¢–æ—á–∫–∞ "${point.name}" –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ –≤—á–∞—Å–Ω–æ!`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–æ—á–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã, –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    const allPointsProcessed = activePatrol.patrolPoints.every(point => {
      if (activePatrol.completedPoints.includes(point.id)) {
        return true; // –¢–æ—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      }

      const startTime = new Date(point.startTime!).getTime();
      const timeoutMs = (point.timeMinutes || settings.patrolTimeMinutes) * 60 * 1000 * (testMode ? 0.1 : 1);
      return now >= startTime + timeoutMs; // –¢–æ—á–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞
    });

    // –ï—Å–ª–∏ –≤—Å–µ —Ç–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ç—Ä—É–ª—å
    if (allPointsProcessed) {
      console.log('–í—Å—ñ —Ç–æ—á–∫–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ (–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∞–±–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ñ). –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–∞—Ç—Ä—É–ª—è...');
      toast.info('–û–±—Ö—ñ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - —á–∞—Å –¥–ª—è –≤—Å—ñ—Ö —Ç–æ—á–æ–∫ –≤–∏–π—à–æ–≤');
      
      // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      if (monitorIntervalRef.current !== null) {
        clearInterval(monitorIntervalRef.current);
        monitorIntervalRef.current = null;
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ç—Ä—É–ª—å
      await endPatrol();
    }
  }, [activePatrol, settings, addLogEntry, patrolPoints, endPatrol, testMode]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—á–µ–∫
  const setupPointsMonitoring = useCallback(() => {
    if (!activePatrol || activePatrol.status !== 'active') return;
    
    console.log('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–æ—á–æ–∫...', {
      pointsCount: activePatrol.patrolPoints.length,
      completedCount: activePatrol.completedPoints.length,
      testMode,
      timeMultiplier: testMode ? 0.1 : 1
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–µ–∫
    if (monitorIntervalRef.current === null) {
      const checkInterval = testMode ? 1000 : 10000; // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –≤ –æ–±—ã—á–Ω–æ–º
      monitorIntervalRef.current = window.setInterval(checkExpiredPoints, checkInterval);
      console.log(`–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${checkInterval}ms`);
    }
  }, [activePatrol, checkExpiredPoints, testMode]);
  
  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const toggleTestMode = useCallback(() => {
    setTestMode(prev => !prev);
    toast.info(`–¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º ${!testMode ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}`);
  }, [testMode]);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—Ä—É–ª—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    setupPointsMonitoring();
    
    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (monitorIntervalRef.current !== null) {
        clearInterval(monitorIntervalRef.current);
        monitorIntervalRef.current = null;
      }
    };
  }, [activePatrol, settings, setupPointsMonitoring, testMode]);

  return {
    activePatrol,
    setActivePatrol,
    startPatrol,
    completePatrolPoint,
    endPatrol,
    toggleTestMode,
    testMode
  };
};
